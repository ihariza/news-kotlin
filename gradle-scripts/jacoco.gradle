apply plugin: 'jacoco'

jacoco {
  toolVersion = "0.8.5"
}

tasks.withType(Test) {
  jacoco.includeNoLocationClasses = true
  jacoco.excludes = ['jdk.internal.*']
}

project.afterEvaluate {

  (android.hasProperty('applicationVariants')
          ? android.'applicationVariants'
          : android.'libraryVariants').all { variant ->
    def variantName = variant.name
    def unitTestTask = "test${variantName.capitalize()}UnitTest"
    def uiTestCoverageTask = "create${variantName.capitalize()}CoverageReport"

    tasks.create(name: "${unitTestTask}Coverage", type: JacocoReport, dependsOn: [
            "$unitTestTask",
            "$uiTestCoverageTask",
    ]) {

      group = "Reporting"
      description = "Generate Jacoco coverage reports for the ${variantName.capitalize()} build."

      reports {
        html.enabled = true
        xml.enabled = true
      }

      def excludes = [
              '**/R.class',
              '**/R$*.class',
              '**/BuildConfig.*',
              '**/Manifest*.*',
              '**/*Test*.*',
              '**/databinding/*',
              '**/generated/callback/*',
              '**/android/databinding/*',
              '**/androidx/databinding/*',
              '**/di/module/*',
              '**/*Mapper*.*',
              '**/*Constant*.*',
              '**/*$ViewInjector*.*',
              '**/*$ViewBinder*.*',
              '**/BuildConfig.*',
              '**/*Component*.*',
              '**/*BR*.*',
              '**/*Dto*.*',
              '**/*Database*.*',
              '**/Manifest*.*',
              '**/*$Lambda$*.*',
              '**/*Companion*.*',
              '**/*Module.*',
              '**/*Dagger*.*',
              '**/*MembersInjector*.*',
              '**/*_Factory*.*',
              '**/*_Provide*Factory*.*',
              '**/*Extensions*.*',
              '**/*$Result.*', /* filtering `sealed` and `data` classes */
              '**/*$Result$*.*'/* filtering `sealed` and `data` classes */
      ]
      def javaClasses = fileTree(dir: variant.javaCompiler.destinationDir, excludes: excludes)
      def kotlinClasses = fileTree(dir: "${buildDir}/tmp/kotlin-classes/${variantName}", excludes: excludes)
      classDirectories.from = files([javaClasses, kotlinClasses])

      def coverageSourceDirs = [
              "$project.projectDir/src/main/java",
              "$project.projectDir/src/${variantName}/java",
              "$project.projectDir/src/main/kotlin",
              "$project.projectDir/src/${variantName}/kotlin"
      ]
      additionalSourceDirs.setFrom(files(coverageSourceDirs))
      sourceDirectories.setFrom(files(coverageSourceDirs))

      def uiTestsData = fileTree(dir: "${buildDir}/outputs/code_coverage/${variantName}AndroidTest/connected/", includes: ["**/*.ec"])

      executionData(files([
              "$project.buildDir/jacoco/${unitTestTask}.exec",
              uiTestsData,
      ]))
    }
  }
}